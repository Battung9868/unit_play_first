workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing (Unity Xcode export)
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: "io.battung.brightbins"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: "Git LFS (нужно для Unity-бинарников)"
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "Import certificate and provisioning profile"
        script: |
          set -euo pipefail

          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          echo "$MOBILEPROVISION" | base64 --decode > profile.mobileprovision

          keychain initialize
          if [ -n "${CERTIFICATE_PASSWORD:-}" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERTIFICATE_PASSWORD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          {
            echo "PROFILE_UUID=$PROFILE_UUID"
            echo "TEAM_ID=$TEAM_ID"
          } >> "$CM_ENV"

          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

      - name: "Locate Xcode project/workspace & install CocoaPods if needed"
        script: |
          set -euo pipefail

          # Ищем сначала .xcworkspace, если нет — .xcodeproj (в любой подпапке)
          TARGET_DIR="$(dirname "$(find . -type f -name "*.xcworkspace" -print -quit)")"
          if [ -z "$TARGET_DIR" ] || [ "$TARGET_DIR" = "." ]; then
            TARGET_DIR="$(dirname "$(find . -type f -name "*.xcodeproj" -print -quit)")"
          fi
          if [ -z "$TARGET_DIR" ]; then
            echo "No .xcworkspace or .xcodeproj found." >&2
            exit 66
          fi
          echo "Project directory: $TARGET_DIR"
          cd "$TARGET_DIR"

          # CocoaPods (если есть Podfile)
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod repo update
            pod install
          fi

          # Определим workspace или project
          if ls ./*.xcworkspace >/dev/null 2>&1; then
            XCODE_WORKSPACE="$(ls -1 *.xcworkspace | head -n 1)"
            echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> "$CM_ENV"
          else
            XCODE_PROJECT="$(ls -1 *.xcodeproj | head -n 1)"
            echo "XCODE_PROJECT=$XCODE_PROJECT" >> "$CM_ENV"
          fi

          # Автовыбор Shared-схемы (без heredoc)
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            SCHEMES_JSON="$(xcodebuild -workspace "$XCODE_WORKSPACE" -list -json 2>/dev/null || true)"
          else
            SCHEMES_JSON="$(xcodebuild -project "$XCODE_PROJECT" -list -json 2>/dev/null || true)"
          fi
          XCODE_SCHEME="$(echo "$SCHEMES_JSON" | /usr/bin/python3 -c 'import sys,json; d=json.load(sys.stdin) if sys.stdin.readable() else {}; w=d.get("workspace") or d.get("project") or {}; s=w.get("schemes") or []; print(s[0] if s else "")')"
          if [ -z "$XCODE_SCHEME" ]; then
            echo "No shared schemes found. Please share a scheme in Xcode." >&2
            exit 66
          fi
          echo "XCODE_SCHEME=$XCODE_SCHEME" >> "$CM_ENV"
          echo "Detected scheme: $XCODE_SCHEME"

      - name: "Prepare versions"
        script: |
          set -euo pipefail
          BUILD_NUM="${APP_BUILD:-$(date +%y%j%H%M%S)}"
          echo "BUILD_NUM=$BUILD_NUM" >> "$CM_ENV"
          if [ -n "${APP_VERSION:-}" ]; then
            echo "APP_VERSION=$APP_VERSION" >> "$CM_ENV"
          fi
          echo "Planned: CURRENT_PROJECT_VERSION=$BUILD_NUM MARKETING_VERSION=${APP_VERSION:-unchanged}"

      - name: "Archive and export IPA"
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          EXTRA_FLAGS=( CURRENT_PROJECT_VERSION="$BUILD_NUM" )
          if [ -n "${APP_VERSION:-}" ]; then
            EXTRA_FLAGS+=( MARKETING_VERSION="$APP_VERSION" )
          fi

          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            echo "Building workspace: $XCODE_WORKSPACE (scheme: $XCODE_SCHEME)"
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | xcpretty
          else
            echo "Building project: $XCODE_PROJECT (scheme: $XCODE_SCHEME)"
            xcodebuild \
              -project "$XCODE_PROJECT" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | xcpretty
          fi

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH" | xcpretty

          ls -lah "$EXPORT_PATH"
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
