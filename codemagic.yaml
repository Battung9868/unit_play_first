workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing (Unity Xcode export)
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        # Если у вас есть Workspace (Pods) — XCODE_WORKSPACE будет найден автоматически.
        # Оставляем твои значения:
        XCODE_PROJECT: "GrainFlow.xcodeproj"
        XCODE_SCHEME: "GrainFlow"
        BUNDLE_ID: "com.GrainFlow.hamzimdin"

        # TEAM_ID возьмём из mobileprovision (OVERRIDE_BY_PROFILE — заглушка до парсинга).
        TEAM_ID: "OVERRIDE_BY_PROFILE"

        # Публикация в App Store
        EXPORT_METHOD: "app-store"

        # Можно задать вручную из UI Codemagic при необходимости:
        # APP_VERSION: "1.1"
        # APP_BUILD: "123"

    scripts:
      - name: "Git LFS (обязательно для больших Unity-бинарников)"
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "Import certificate and provisioning profile"
        script: |
          set -euo pipefail

          # Декодируем секреты
          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          echo "$MOBILEPROVISION" | base64 --decode > profile.mobileprovision

          # Кейчейн и сертификат
          keychain initialize
          if [ -n "${CERTIFICATE_PASSWORD:-}" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERTIFICATE_PASSWORD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          # Установка профиля и чтение UUID/TeamIdentifier
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")

          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Using Provisioning Profile UUID: $PROFILE_UUID"
          echo "TeamIdentifier from profile: $PROFILE_TEAM_ID"

          # Экспортируем для следующих шагов
          {
            echo "PROFILE_UUID=$PROFILE_UUID"
            echo "TEAM_ID=$PROFILE_TEAM_ID"
          } >> "$CM_ENV"

          # Готовим exportOptions.plist
          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

          # Применяем профиль к проекту (утилита Codemagic)
          if [ -n "${XCODE_PROJECT:-}" ] && [ -f "$XCODE_PROJECT" ]; then
            xcode-project use-profiles --project "$XCODE_PROJECT" --export-options-plist exportOptions.plist
          fi

      - name: "Install CocoaPods if needed (Unity export may have Podfile)"
        script: |
          set -euo pipefail
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod repo update
            pod install
          else
            echo "No Podfile found — skipping CocoaPods."
          fi

      - name: "Prepare versions (no direct Info.plist edits)"
        script: |
          set -euo pipefail
          BUILD_NUM="${APP_BUILD:-$(date +%y%j%H%M%S)}"
          echo "BUILD_NUM=$BUILD_NUM" >> "$CM_ENV"

          if [ -n "${APP_VERSION:-}" ]; then
            echo "APP_VERSION=$APP_VERSION" >> "$CM_ENV"
          fi

          echo "== Planned versions =="
          echo "MARKETING_VERSION=${APP_VERSION:-(unchanged)}"
          echo "CURRENT_PROJECT_VERSION=$BUILD_NUM"

      - name: "Archive and export IPA (auto-detect workspace/project)"
        script: |
          set -euo pipefail

          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"
          SCHEME="${XCODE_SCHEME}"

          # Если после pod install появился workspace — используем его
          if ls ./*.xcworkspace >/dev/null 2>&1; then
            XCODE_WORKSPACE="$(ls -1 *.xcworkspace | head -n1)"
            echo "Detected workspace: $XCODE_WORKSPACE"
            USE_WORKSPACE=1
          elif [ -n "${XCODE_WORKSPACE:-}" ] && [ -f "$XCODE_WORKSPACE" ]; then
            echo "Using provided workspace: $XCODE_WORKSPACE"
            USE_WORKSPACE=1
          else
            echo "Using project: $XCODE_PROJECT"
            USE_WORKSPACE=0
          fi

          # Версионные флаги напрямую в xcodebuild (не трогаем plist)
          EXTRA_FLAGS=( CURRENT_PROJECT_VERSION="$BUILD_NUM" )
          if [ -n "${APP_VERSION:-}" ]; then
            EXTRA_FLAGS+=( MARKETING_VERSION="$APP_VERSION" )
          fi

          echo "Archiving to: $ARCHIVE_PATH"
          if [ "$USE_WORKSPACE" -eq 1 ]; then
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | xcpretty
          else
            xcodebuild \
              -project "$XCODE_PROJECT" \
              -scheme "$SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | xcpretty
          fi

          echo "Exporting IPA to: $EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH" | xcpretty

          echo "Export dir listing:"
          ls -lah "$EXPORT_PATH" || true
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
