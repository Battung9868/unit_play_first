workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing (Unity Xcode export)
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: "io.battung.brightbins"
        EXPORT_METHOD: "app-store"
        # APP_VERSION: "1.1"   # опционально
        # APP_BUILD: "123"     # опционально

    scripts:
      - name: "Git LFS (для тяжёлых Unity-бинарников)"
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "Import certificate and provisioning profile"
        script: |
          set -euo pipefail
          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          echo "$MOBILEPROVISION" | base64 --decode > profile.mobileprovision

          keychain initialize
          if [ -n "${CERTIFICATE_PASSWORD:-}" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERTIFICATE_PASSWORD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print Name' /dev/stdin <<< "$PROFILE_PLIST")
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")
          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          {
            echo "PROFILE_UUID=$PROFILE_UUID"
            echo "PROFILE_NAME=$PROFILE_NAME"
            echo "TEAM_ID=$TEAM_ID"
          } >> "$CM_ENV"

          # exportOptions.plist: важно — используем ИМЯ профиля
          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

      - name: "Locate Xcode project/workspace & install CocoaPods if needed"
        script: |
          set -euo pipefail

          # 1) Ищем директории .xcworkspace / .xcodeproj во всём репо
          TARGET_WS="$(find . -type d -name "*.xcworkspace" -prune -print -quit || true)"
          TARGET_PR="$(find . -type d -name "*.xcodeproj"   -prune -print -quit || true)"

          if [ -n "$TARGET_WS" ]; then
            TARGET_DIR="$(dirname "$TARGET_WS")"
            cd "$TARGET_DIR"
            XCODE_WORKSPACE="$(basename "$TARGET_WS")"
            echo "Using workspace: $XCODE_WORKSPACE (dir: $TARGET_DIR)"
            echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> "$CM_ENV"
          elif [ -n "$TARGET_PR" ]; then
            TARGET_DIR="$(dirname "$TARGET_PR")"
            cd "$TARGET_DIR"
            XCODE_PROJECT="$(basename "$TARGET_PR")"
            echo "Using project: $XCODE_PROJECT (dir: $TARGET_DIR)"
            echo "XCODE_PROJECT=$XCODE_PROJECT" >> "$CM_ENV"
          else
            echo "❌ No .xcworkspace or .xcodeproj found. Repo tree:" >&2
            find . -maxdepth 3 -print | sed -n '1,300p'
            exit 66
          fi

          # 2) CocoaPods (если есть Podfile — установим; может создать workspace)
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod repo update
            pod install
            if ls ./*.xcworkspace >/dev/null 2>&1; then
              XCODE_WORKSPACE="$(ls -1 *.xcworkspace | head -n1)"
              echo "Detected workspace after Pods: $XCODE_WORKSPACE"
              echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> "$CM_ENV"
            fi
          fi

          # 3) Получаем список схем (текстовый вывод)
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            LIST_TXT="$(xcodebuild -workspace "$XCODE_WORKSPACE" -list 2>/dev/null || true)"
          else
            LIST_TXT="$(xcodebuild -project "$XCODE_PROJECT" -list 2>/dev/null || true)"
          fi

          SCHEMES="$(printf '%s\n' "$LIST_TXT" | awk '/Schemes:/{flag=1;next} flag && NF {print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          if [ -z "$SCHEMES" ]; then
            echo "❌ No shared schemes found. Enable 'Shared' in Xcode." >&2
            printf 'xcodebuild -list output:\n%s\n' "$LIST_TXT" >&2
            exit 66
          fi

          # Сохраним в файл без heredoc/подстановок
          echo "$SCHEMES" | tr -d '\r' > schemes.txt

          # 4) Выбираем схему: Unity-iPhone > любая с WRAPPER_EXTENSION=app > первая
          XCODE_SCHEME=""
          FIRST_SCHEME="$(head -n 1 schemes.txt)"

          if grep -qx "Unity-iPhone" schemes.txt; then
            XCODE_SCHEME="Unity-iPhone"
          else
            while IFS= read -r s; do
              [ -z "$s" ] && continue
              if [ -n "${XCODE_WORKSPACE:-}" ]; then
                if xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$s" -showBuildSettings 2>/dev/null | grep -q "WRAPPER_EXTENSION = app"; then
                  XCODE_SCHEME="$s"; break
                fi
              else
                if xcodebuild -project "$XCODE_PROJECT" -scheme "$s" -showBuildSettings 2>/dev/null | grep -q "WRAPPER_EXTENSION = app"; then
                  XCODE_SCHEME="$s"; break
                fi
              fi
            done < schemes.txt
          fi

          [ -z "$XCODE_SCHEME" ] && XCODE_SCHEME="$FIRST_SCHEME"

          echo "Detected scheme: $XCODE_SCHEME"
          echo "XCODE_SCHEME=$XCODE_SCHEME" >> "$CM_ENV"

      - name: "Patch Unity 'Run Script' phases that break CI"
        script: |
          set -euo pipefail
          if [ -n "${XCODE_PROJECT:-}" ]; then
            PBXPROJ="$XCODE_PROJECT/project.pbxproj"
          else
            PNAME="$(basename "$XCODE_WORKSPACE" .xcworkspace)"
            PBXPROJ="$PNAME.xcodeproj/project.pbxproj"
          fi
          if [ ! -f "$PBXPROJ" ]; then
            echo "⚠️  project.pbxproj not found at $PBXPROJ, skip patch"; exit 0
          fi

          cp "$PBXPROJ" "$PBXPROJ.bak"
          # Отключаем ВСЕ стадии "Run Script" (не трогаем CocoaPods, у них [CP] в name)
          awk '
            /isa = PBXShellScriptBuildPhase;/ {inblk=1}
            inblk && /name = "Run Script";/ {mark=1}
            inblk && mark && /shellScript = / {
              sub(/shellScript =.*/, "shellScript = \"echo Skipped Unity Run Script on CI\";");
            }
            inblk && /};/ {inblk=0; mark=0}
            {print}
          ' "$PBXPROJ" > "$PBXPROJ.patched"
          mv "$PBXPROJ.patched" "$PBXPROJ"
          echo "Patched PBXShellScriptBuildPhase \"Run Script\" → echo Skipped"

      - name: "Prepare versions"
        script: |
          set -euo pipefail
          BUILD_NUM="${APP_BUILD:-$(date +%y%j%H%M%S)}"
          echo "BUILD_NUM=$BUILD_NUM" >> "$CM_ENV"
          if [ -n "${APP_VERSION:-}" ]; then
            echo "APP_VERSION=$APP_VERSION" >> "$CM_ENV"
          fi
          echo "Planned: CURRENT_PROJECT_VERSION=$BUILD_NUM MARKETING_VERSION=${APP_VERSION:-unchanged}"

            - name: "Archive and export IPA"
        script: |
          set -euo pipefail

          ARCHIVE_PATH="$CM_BUILD_DIR/App.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"
          LOGFILE="$CM_BUILD_DIR/xcodebuild-archive.log"

          EXTRA_FLAGS=( CURRENT_PROJECT_VERSION="$BUILD_NUM" )
          if [ -n "${APP_VERSION:-}" ]; then
            EXTRA_FLAGS+=( MARKETING_VERSION="$APP_VERSION" )
          fi

          echo "Archiving… logs → $LOGFILE"
          set +e
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            xcodebuild \
              -workspace "$XCODE_WORKSPACE" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | tee "$LOGFILE"
          else
            xcodebuild \
              -project "$XCODE_PROJECT" \
              -scheme "$XCODE_SCHEME" \
              -configuration Release \
              -archivePath "$ARCHIVE_PATH" \
              -destination "generic/platform=iOS" \
              archive \
              DEVELOPMENT_TEAM="$TEAM_ID" \
              CODE_SIGN_STYLE=Manual \
              PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
              CODE_SIGN_IDENTITY="Apple Distribution" \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${EXTRA_FLAGS[@]}" | tee "$LOGFILE"
          fi
          EXIT=${PIPESTATUS[0]}
          set -e

          if [ "$EXIT" -ne 0 ]; then
            echo "==== LAST 300 LINES OF XCODEBUILD LOG ===="
            tail -n 300 "$LOGFILE" || true
            exit "$EXIT"
          fi

          echo "Exporting IPA…"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH" | tee -a "$LOGFILE"

          echo "Export dir:"
          ls -lah "$EXPORT_PATH"
          test -e "$EXPORT_PATH"/*.ipa


    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
