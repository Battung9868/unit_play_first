workflows:
  ios_appstore_signing:
    name: "iOS App Store (Unity Xcode, auto → manual fallback)"
    max_build_duration: 60
    # instance_type: mac_mini_m2

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        DEVELOPMENT_TEAM: R35GJ22D76
        SCHEME: Unity-iPhone
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"     # у тебя .xcodeproj в корне
        PROFILE_NAME: BrightBins                    # имя профиля ИЗ Dev Portal (НЕ UUID)
        EXPORT_METHOD: app-store-connect            # новое имя метода

    scripts:
      - name: "Git LFS (Unity бинарники)"
        script: |
          set -eu
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "Импорт сертификата и профиля"
        script: |
          set -eu
          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"

          # Сертификат (путь или base64)
          CERT_FILE="cert.p12"
          if [ -n "${CERTIFICATE_P12:-}" ] && [ -f "${CERTIFICATE_P12:-/dev/null}" ]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            printf "%s" "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi
          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME" || true

          # Профиль (путь или base64) → кладём в систему
          PROF_FILE="profile.mobileprovision"
          if [ -n "${MOBILEPROVISION:-}" ] && [ -f "${MOBILEPROVISION:-/dev/null}" ]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            printf "%s" "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"

          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          PROFILE_NAME_DETECTED=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST" 2>/dev/null || true)
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST" 2>/dev/null || echo "")
          GET_TASK_ALLOW=$(/usr/libexec/PlistBuddy -c "Print Entitlements:get-task-allow" "$TMP_PLIST" 2>/dev/null || echo "nil")

          cp "$PROF_FILE" "$PROFILE_DIR/$PROFILE_UUID.mobileprovision"

          echo "export PROFILE_UUID=\"$PROFILE_UUID\"" >> "$CM_ENV"
          echo "export PROFILE_NAME=\"${PROFILE_NAME:-$PROFILE_NAME_DETECTED}\"" >> "$CM_ENV"

          echo "PROFILE_UUID=$PROFILE_UUID"
          echo "PROFILE_NAME=${PROFILE_NAME:-$PROFILE_NAME_DETECTED}"
          echo "application-identifier=$APP_IDENTIFIER"
          echo "get-task-allow=$GET_TASK_ALLOW"

      - name: "Sanity: .xcodeproj exists"
        script: |
          set -eu
          test -d "$XCODE_PROJECT" || { echo "ERROR: не найден проект: $XCODE_PROJECT"; exit 1; }
          echo "OK: проект найден: $XCODE_PROJECT"

      - name: "Поднять номер сборки (CFBundleVersion)"
        script: |
          set -eu
          INFOPLIST="$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)"
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST="$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)"
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
            echo "CFBundleVersion => $CM_BUILD_ID"
          else
            echo "WARNING: Info.plist не найден — пропускаю"
          fi

      - name: "Archive and export IPA (auto → manual)"
        script: |
          set -eu
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${XCODE_PROJECT:?Missing XCODE_PROJECT}"

          CHOSEN_SCHEME="${SCHEME:-Unity-iPhone}"
          echo "Archive scheme: $CHOSEN_SCHEME"

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"
          CM_EXPORT_DIR="${CM_EXPORT_DIR:-$CM_BUILD_DIR/Export}"
          mkdir -p "$CM_EXPORT_DIR"

          # 1) Архив без подписи
          xcodebuild -resolvePackageDependencies -project "$XCODE_PROJECT" -scheme "$CHOSEN_SCHEME"
          xcodebuild archive \
            -project "$XCODE_PROJECT" \
            -scheme "$CHOSEN_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # Диагностика: какой bundle id реально лежит в архиве
          if [ -f "$ARCHIVE_PATH/Info.plist" ]; then
            /usr/libexec/PlistBuddy -c "Print ApplicationProperties:CFBundleIdentifier" "$ARCHIVE_PATH/Info.plist" || true
          fi

          # 2) Экспорт с АВТО-подписанием
          cat > exportOptions_auto.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>__METHOD__</string>
            <key>teamID</key>
            <string>__TEAM__</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          sed -i.bak "s|__METHOD__|$EXPORT_METHOD|; s|__TEAM__|$DEVELOPMENT_TEAM|" exportOptions_auto.plist

          set +e
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions_auto.plist \
            -exportPath "$CM_EXPORT_DIR" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"
          XCB_RET=$?
          set -e

          IPA_PATH="$(find "$CM_EXPORT_DIR" -name '*.ipa' -print -quit || true)"
          if [ "$XCB_RET" -ne 0 ] || [ -z "$IPA_PATH" ]; then
            echo "Auto export failed or no IPA. Trying MANUAL for app bundle only…"

            # 3) MANUAL-подписание ТОЛЬКО для основного bundle id
            #   ВАЖНО: без signingCertificate, чтобы фреймворки не требовали профиль
            cat > exportOptions_manual.plist <<EOF
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>method</key>
              <string>${EXPORT_METHOD}</string>
              <key>teamID</key>
              <string>${DEVELOPMENT_TEAM}</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>${BUNDLE_ID}</key>
                <string>${PROFILE_NAME}</string>
              </dict>
              <key>destination</key>
              <string>export</string>
              <key>compileBitcode</key>
              <false/>
              <key>uploadBitcode</key>
              <false/>
            </dict>
            </plist>
            EOF

            set +e
            xcodebuild -exportArchive \
              -archivePath "$ARCHIVE_PATH" \
              -exportOptionsPlist exportOptions_manual.plist \
              -exportPath "$CM_EXPORT_DIR" \
            | tee -a "$CM_BUILD_DIR/xcodebuild-export.log"
            XCB_RET=$?
            set -e

            IPA_PATH="$(find "$CM_EXPORT_DIR" -name '*.ipa' -print -quit || true)"
            if [ "$XCB_RET" -ne 0 ] || [ -z "$IPA_PATH" ]; then
              echo "ERROR: IPA не создана. Хвост лога экспорта:"
              tail -n 200 "$CM_BUILD_DIR/xcodebuild-export.log" || true
              exit 1
            fi
          fi

          echo "IPA created: $IPA_PATH"
          echo "Export dir content:"
          find "$CM_EXPORT_DIR" -maxdepth 2 -type f -print || true

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

        submit_to_testflight: true
        submit_to_app_store: true
        cancel_previous_submissions: true
        release_type: MANUAL
