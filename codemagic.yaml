workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode, manual signing)
    max_build_duration: 60
    # instance_type: mac_mini_m2

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        SCHEME: Unity-iPhone
        CHOSEN_SCHEME: Unity-iPhone
        DEVELOPMENT_TEAM: R35GJ22D76
        PROFILE_NAME: BrightBins              # –ò–ú–Ø App Store –ø—Ä–æ—Ñ–∏–ª—è
        EXPORT_METHOD: app-store-connect
        # ‚Üì –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω—ã–π –ø—É—Ç—å:
        # XCODE_WORKSPACE_HINT: "Xcode/Unity-iPhone.xcworkspace"
        # XCODE_PROJECT_HINT:   "Xcode/Unity-iPhone.xcodeproj"

    scripts:
      - name: Git LFS (Unity –±–∏–Ω–∞—Ä–Ω–∏–∫–∏)
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: –ò–º–ø–æ—Ä—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è
        script: |
          set -euo pipefail
          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed 's/[" ]//g')

          # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (secure-—Ñ–∞–π–ª –∏–ª–∏ base64)
          CERT_FILE="cert.p12"
          if [ -n "${CERTIFICATE_P12:-}" ] && [ -f "${CERTIFICATE_P12:-/dev/null}" ]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            echo "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi

          # –ü—Ä–æ—Ñ–∏–ª—å (secure-—Ñ–∞–π–ª –∏–ª–∏ base64)
          PROF_FILE="profile.mobileprovision"
          if [ -n "${MOBILEPROVISION:-}" ] && [ -f "${MOBILEPROVISION:-/dev/null}" ]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            echo "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          rm -f "$TMP_PLIST"
          cp "$PROF_FILE" "$PROFILE_DIR/$UUID.mobileprovision"

      - name: –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç/–≤–æ—Ä–∫—Å–ø–µ–π—Å –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É (–±–µ–∑ xcodebuild -list)
        script: |
          set -euo pipefail
          shopt -s globstar nullglob

          # 1) –°—Ö–µ–º–∞
          CHOSEN="${SCHEME:-Unity-iPhone}"
          echo "‚úÖ Using scheme: $CHOSEN"
          echo "export CHOSEN_SCHEME=\"$CHOSEN\"" >> "$CM_ENV"

          # 2) Workspace/project –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–ª–∏ –ø–æ –º–∞—Å–∫–∞–º
          WS=""
          PR=""

          if [ -n "${XCODE_WORKSPACE_HINT:-}" ] && [ -d "$XCODE_WORKSPACE_HINT" ]; then
            WS="$XCODE_WORKSPACE_HINT"
          else
            # –ª—é–±–æ–π *.xcworkspace (–±–µ—Ä—ë–º —Å–∞–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø–æ –ø—É—Ç–∏)
            for p in **/*.xcworkspace; do WS="$p"; break; done
          fi

          if [ -n "${XCODE_PROJECT_HINT:-}" ] && [ -d "$XCODE_PROJECT_HINT" ]; then
            PR="$XCODE_PROJECT_HINT"
          else
            # —Å–Ω–∞—á–∞–ª–∞ Unity-iPhone.xcodeproj, –∏–Ω–∞—á–µ –ª—é–±–æ–π *.xcodeproj
            for p in **/Unity-iPhone.xcodeproj; do PR="$p"; break; done
            if [ -z "$PR" ]; then
              for p in **/*.xcodeproj; do PR="$p"; break; done
            fi
          fi

          if [ -n "$WS" ]; then
            echo "üìÅ workspace: $WS"
            echo "export XCODE_WORKSPACE=\"$WS\"" >> "$CM_ENV"
          elif [ -n "$PR" ]; then
            echo "üìÅ project:   $PR"
            echo "export XCODE_PROJECT=\"$PR\"" >> "$CM_ENV"
          else
            echo "üìÇ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ä—è–¥–æ–º (–¥–æ 4 —É—Ä–æ–≤–Ω–µ–π):"
            find . -maxdepth 4 -type d -name '*.xcodeproj' -or -name '*.xcworkspace' || true
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .xcworkspace –∏–ª–∏ .xcodeproj"; exit 1
          fi

      - name: –ü–æ–¥–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
        script: |
          set -euo pipefail
          INFOPLIST=$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST=$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
          else
            echo "‚ö†Ô∏è Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é"
          fi

      - name: Archive and export IPA
        script: |
          set -euo pipefail
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"

          CHOSEN_SCHEME="${CHOSEN_SCHEME:-${SCHEME:-Unity-iPhone}}"
          [ -z "$CHOSEN_SCHEME" ] && { echo "‚ùå –ù–µ—Ç —Å—Ö–µ–º—ã"; exit 1; }
          echo "‚úÖ Archive will use scheme: $CHOSEN_SCHEME"

          # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–≤–µ—Ä—Ö-–Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞/–≤–æ—Ä–∫—Å–ø–µ–π—Å–∞ (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–µ—Ö–∞–ª–∏)
          if [ -n "${XCODE_WORKSPACE:-}" ] && [ -d "$XCODE_WORKSPACE" ]; then
            PROJ_ARG=(-workspace "$XCODE_WORKSPACE")
          elif [ -n "${XCODE_PROJECT:-}" ] && [ -d "$XCODE_PROJECT" ]; then
            PROJ_ARG=(-project "$XCODE_PROJECT")
          else
            echo "‚ö†Ô∏è workspace/project –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫‚Ä¶"
            shopt -s globstar nullglob
            WS=""; PR=""
            for p in **/*.xcworkspace; do WS="$p"; break; done
            for p in **/Unity-iPhone.xcodeproj; do PR="$p"; break; done
            if [ -z "$PR" ]; then
              for p in **/*.xcodeproj; do PR="$p"; break; done
            fi
            if [ -n "$WS" ]; then
              PROJ_ARG=(-workspace "$WS")
              echo "Using workspace (re-detected): $WS"
            elif [ -n "$PR" ]; then
              PROJ_ARG=(-project "$PR")
              echo "Using project (re-detected): $PR"
            else
              echo "üìÇ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ä—è–¥–æ–º:"; find . -maxdepth 6 -type d -name '*.xcodeproj' -or -name '*.xcworkspace' || true
              echo "‚ùå –ù–∏ workspace, –Ω–∏ project –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"; exit 1
            fi
          fi

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"

          # 1) –ê—Ä—Ö–∏–≤ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
          xcodebuild -resolvePackageDependencies "${PROJ_ARG[@]}" -scheme "$CHOSEN_SCHEME"
          xcodebuild archive \
            "${PROJ_ARG[@]}" \
            -scheme "$CHOSEN_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ bundle id –≤ –∞—Ä—Ö–∏–≤–µ
          APP_BUNDLE_IN_ARCHIVE="$(/usr/libexec/PlistBuddy -c 'Print :ApplicationProperties:CFBundleIdentifier' "$ARCHIVE_PATH/Info.plist" 2>/dev/null || true)"
          echo "Archive CFBundleIdentifier: ${APP_BUNDLE_IN_ARCHIVE:-<empty>}"
          if [ "$APP_BUNDLE_IN_ARCHIVE" != "$BUNDLE_ID" ]; then
            echo "‚ùå CFBundleIdentifier –≤ –∞—Ä—Ö–∏–≤–µ ($APP_BUNDLE_IN_ARCHIVE) != –æ–∂–∏–¥–∞–µ–º–æ–º—É ($BUNDLE_ID)"; exit 1
          fi

          # 3) –≠–∫—Å–ø–æ—Ä—Ç: —Ä—É—á–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –¥–ª—è APP (–±–µ–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤)
          mkdir -p "$CM_EXPORT_DIR"
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_EXPORT_DIR" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # skip_waiting_for_build_processing: true
