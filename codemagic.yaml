workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode, manual signing)
    max_build_duration: 60
    # instance_type: mac_mini_m2

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        DEVELOPMENT_TEAM: R35GJ22D76
        SCHEME: Unity-iPhone
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"    # .xcodeproj –≤ –∫–æ—Ä–Ω–µ
        PROFILE_NAME: BrightBins                   # –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–ù–ï UUID)
        EXPORT_METHOD: app-store                   # –¥–ª—è App Store

    scripts:
      - name: "Git LFS (Unity –±–∏–Ω–∞—Ä–Ω–∏–∫–∏)"
        script: |
          set -eu
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "–ò–º–ø–æ—Ä—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è"
        script: |
          set -eu
          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"

          # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–ø—É—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64)
          CERT_FILE="cert.p12"
          if [ -n "${CERTIFICATE_P12:-}" ] && [ -f "${CERTIFICATE_P12:-/dev/null}" ]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            printf "%s" "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi
          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME" || true

          # –ü—Ä–æ—Ñ–∏–ª—å (–ø—É—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64) ‚Üí —Å—Ç–∞–≤–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
          PROF_FILE="profile.mobileprovision"
          if [ -n "${MOBILEPROVISION:-}" ] && [ -f "${MOBILEPROVISION:-/dev/null}" ]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            printf "%s" "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"

          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          PROFILE_NAME_DETECTED=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST" 2>/dev/null || true)
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST")

          cp "$PROF_FILE" "$PROFILE_DIR/$PROFILE_UUID.mobileprovision"

          echo "export PROFILE_UUID=\"$PROFILE_UUID\"" >> "$CM_ENV"
          if [ -n "${PROFILE_NAME:-}" ]; then
            echo "export PROFILE_NAME=\"$PROFILE_NAME\"" >> "$CM_ENV"
          else
            echo "export PROFILE_NAME=\"$PROFILE_NAME_DETECTED\"" >> "$CM_ENV"
          fi

          case "$APP_IDENTIFIER" in
            *."$BUNDLE_ID"|"$DEVELOPMENT_TEAM.$BUNDLE_ID") : ;;
            *) echo "‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å $BUNDLE_ID (–ø—Ä–æ–≤–µ—Ä—å —Ç–∏–ø: App Store –∏ bundle id).";;
          esac

      - name: "Sanity: .xcodeproj exists"
        script: |
          set -eu
          echo "PWD=$(pwd)"
          ls -la
          test -d "$XCODE_PROJECT" || { echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: $XCODE_PROJECT"; exit 1; }
          echo "‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç: $XCODE_PROJECT"

      - name: "–ü–æ–¥–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ (CFBundleVersion)"
        script: |
          set -eu
          INFOPLIST="$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)"
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST="$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)"
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
            echo "üì¶ CFBundleVersion => $CM_BUILD_ID"
          else
            echo "‚ö†Ô∏è Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é"
          fi

      - name: "Archive and export IPA (manual signing)"
        script: |
          set -eu
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${XCODE_PROJECT:?Missing XCODE_PROJECT}"

          CHOSEN_SCHEME="${SCHEME:-Unity-iPhone}"
          echo "‚úÖ Archive will use scheme: $CHOSEN_SCHEME"

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"
          CM_EXPORT_DIR="${CM_EXPORT_DIR:-$CM_BUILD_DIR/Export}"
          mkdir -p "$CM_EXPORT_DIR"

          # 1) –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
          eval xcodebuild -resolvePackageDependencies -project \""$XCODE_PROJECT"\" -scheme \""$CHOSEN_SCHEME"\"
          eval xcodebuild archive \
            -project \""$XCODE_PROJECT"\" \
            -scheme \""$CHOSEN_SCHEME"\" \
            -configuration Release \
            -archivePath \""$ARCHIVE_PATH"\" \
            DEVELOPMENT_TEAM=\""$DEVELOPMENT_TEAM"\" \
            PRODUCT_BUNDLE_IDENTIFIER=\""$BUNDLE_ID"\" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # 2) –≠–∫—Å–ø–æ—Ä—Ç —Å —Ä—É—á–Ω—ã–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          echo "üßæ exportOptions.plist:"; cat exportOptions.plist

          set +e
          eval xcodebuild -exportArchive \
            -archivePath \""$ARCHIVE_PATH"\" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath \""$CM_EXPORT_DIR"\" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"
          XCB_RET=$?
          set -e

          echo "üìÇ Export dir: $CM_EXPORT_DIR"
          find "$CM_EXPORT_DIR" -maxdepth 2 -type f -print || true

          IPA_PATH="$(find "$CM_EXPORT_DIR" -name '*.ipa' -print -quit || true)"
          if [ $XCB_RET -ne 0 ] || [ -z "$IPA_PATH" ]; then
            echo "‚ùå IPA –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Ö–≤–æ—Å—Ç):"
            tail -n 200 "$CM_BUILD_DIR/xcodebuild-export.log" || true
            exit 1
          fi

          echo "‚úÖ IPA —Å–æ–∑–¥–∞–Ω–∞: $IPA_PATH"

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID

        submit_to_testflight: true
        submit_to_app_store: true            # –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞ App Store Review
        cancel_previous_submissions: true    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        release_type: MANUAL                 # MANUAL | AFTER_APPROVAL | SCHEDULED
        # earliest_release_date: 2025-10-20T10:00:00+00:00
