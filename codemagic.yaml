workflows:
  ios_appstore_signing:
    name: "iOS App Store (Unity Xcode, robust)"
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12 (base64/путь), CERTIFICATE_PASSWORD, MOBILEPROVISION (base64/путь)
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        DEVELOPMENT_TEAM: R35GJ22D76
        SCHEME: Unity-iPhone
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        EXPORT_METHOD: app-store-connect   # Xcode 16+

    scripts:
      # Если у тебя нет LFS-квоты — закомментируй этот шаг
      - name: "Git LFS (Unity бинарники)"
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: "Импорт сертификата и профиля"
        script: |
          set -euo pipefail

          # --- Keychain ---
          KEYCHAIN_NAME=cm.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"

          # --- Сертификат (.p12) ---
          : "${CERTIFICATE_PASSWORD:?Missing CERTIFICATE_PASSWORD}"
          [[ -z "${CERTIFICATE_P12:-}" ]] && { echo "❌ CERTIFICATE_P12 not provided"; exit 1; }
          CERT_FILE="cert.p12"
          if [[ -f "$CERTIFICATE_P12" ]]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            printf "%s" "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi
          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          echo "== Codesign identities =="
          security find-identity -v -p codesigning "$KEYCHAIN_NAME" || true

          # --- Профиль (.mobileprovision) ---
          [[ -z "${MOBILEPROVISION:-}" ]] && { echo "❌ MOBILEPROVISION not provided"; exit 1; }
          PROF_FILE="profile.mobileprovision"
          if [[ -f "$MOBILEPROVISION" ]]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            printf "%s" "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"

          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          PROFILE_NAME_DETECTED=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST" 2>/dev/null || echo "")
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST" 2>/dev/null || echo "")
          GET_TASK_ALLOW=$(/usr/libexec/PlistBuddy -c "Print Entitlements:get-task-allow" "$TMP_PLIST" 2>/dev/null || echo "nil")

          cp "$PROF_FILE" "$PROFILE_DIR/$PROFILE_UUID.mobileprovision"

          echo "PROFILE_UUID=$PROFILE_UUID"
          echo "PROFILE_NAME=$PROFILE_NAME_DETECTED"
          echo "application-identifier=$APP_IDENTIFIER"
          echo "get-task-allow=$GET_TASK_ALLOW"

          [[ "$GET_TASK_ALLOW" == "false" ]] || { echo "❌ Нужен App Store Distribution профиль"; exit 1; }
          EXPECTED_AI="${DEVELOPMENT_TEAM}.${BUNDLE_ID}"
          [[ "$APP_IDENTIFIER" == "$EXPECTED_AI" ]] || { echo "❌ Профиль не под $BUNDLE_ID (ожидали $EXPECTED_AI)"; exit 1; }

          # В окружение
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
          echo "PROFILE_NAME=$PROFILE_NAME_DETECTED" >> "$CM_ENV"
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> "$CM_ENV"
          echo "KEYCHAIN_PASS=$KEYCHAIN_PASS" >> "$CM_ENV"

      - name: "Sanity: .xcodeproj exists"
        script: |
          set -euo pipefail
          test -d "$XCODE_PROJECT" || { echo "ERROR: не найден проект: $XCODE_PROJECT"; exit 1; }
          echo "OK: проект найден: $XCODE_PROJECT"

      # Полная чистка Manual-профилей в проекте (включая UnityFramework)
      - name: "Clear manual provisioning from pbxproj"
        script: |
          set -euo pipefail
          PBX="$XCODE_PROJECT/project.pbxproj"
          cp "$PBX" "$PBX.bak" || true
          # Удаляем любые PROVISIONING_PROFILE/PROVISIONING_PROFILE_SPECIFIER (включая sdk-override)
          sed -i '' -E 's/PROVISIONING_PROFILE(_SPECIFIER)?(\[sdk=[^]]+\])?[[:space:]]*=[[:space:]]*[^;]+;//g' "$PBX"
          # Manual -> Automatic
          sed -i '' -E 's/CODE_SIGN_STYLE(\[sdk=[^]]+\])?[[:space:]]*=[[:space:]]*Manual;/CODE_SIGN_STYLE\1 = Automatic;/g' "$PBX"

      - name: "Verify no manual provisioning left"
        script: |
          set -euo pipefail
          PBX="$XCODE_PROJECT/project.pbxproj"
          if grep -nE 'PROVISIONING_PROFILE(_SPECIFIER)?[[:space:]]*=' "$PBX"; then
            echo "❌ Нашлись ручные профили в pbxproj"; exit 1
          fi
          echo "OK: PROVISIONING_PROFILE* не найден"

      - name: "Archive (codesign OFF)"
        script: |
          set -euo pipefail
          source "$CM_ENV" || true
          CHOSEN_SCHEME="${SCHEME:-Unity-iPhone}"
          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"

          xcodebuild -resolvePackageDependencies -project "$XCODE_PROJECT" -scheme "$CHOSEN_SCHEME"
          xcodebuild archive \
            -project "$XCODE_PROJECT" \
            -scheme "$CHOSEN_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_STYLE=Automatic \
            PROVISIONING_PROFILE_SPECIFIER="" \
            PROVISIONING_PROFILE="" \
            | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # Диагностика
          if [[ -f "$ARCHIVE_PATH/Info.plist" ]]; then
            echo "Archive bundle id:"
            /usr/libexec/PlistBuddy -c "Print ApplicationProperties:CFBundleIdentifier" "$ARCHIVE_PATH/Info.plist" || true
          fi

      # Патчим CFBundleIdentifier UnityFramework внутри архива (если совпадает с app)
      - name: "Patch UnityFramework CFBundleIdentifier inside archive"
        script: |
          set -euo pipefail
          source "$CM_ENV" || true
          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"
          APP_PATH="$(ls -d "$ARCHIVE_PATH/Products/Applications"/*.app | head -n1 || true)"
          if [[ -z "$APP_PATH" ]]; then
            echo "❌ Не найден .app в архиве"; exit 1
          fi
          FR_PLIST="$APP_PATH/Frameworks/UnityFramework.framework/Info.plist"
          if [[ -f "$FR_PLIST" ]]; then
            UF_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$FR_PLIST" 2>/dev/null || echo "")
            echo "UnityFramework CFBundleIdentifier (before): $UF_ID"
            if [[ "$UF_ID" == "$BUNDLE_ID" || "$UF_ID" == "" ]]; then
              /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID.uf" "$FR_PLIST"
              echo "UnityFramework CFBundleIdentifier (after): $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$FR_PLIST")"
            else
              echo "UnityFramework CFBundleIdentifier отличается от app — ок."
            fi
          else
            echo "⚠️ UnityFramework Info.plist не найден — продолжаю."
          fi

      - name: "Export IPA (Automatic → fallback Manual)"
        script: |
          set -euo pipefail
          source "$CM_ENV" || true

          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"
          CM_EXPORT_DIR="${CM_EXPORT_DIR:-$CM_BUILD_DIR/Export}"
          mkdir -p "$CM_EXPORT_DIR"

          # Попытка 1: AUTOMATIC (без provisioningProfiles)
          AUTO_PLIST="$CM_BUILD_DIR/exportOptions_auto.plist"
          /usr/libexec/PlistBuddy -c "Clear dict" "$AUTO_PLIST" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :method string $EXPORT_METHOD" "$AUTO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :teamID string $DEVELOPMENT_TEAM" "$AUTO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :signingStyle string automatic" "$AUTO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :destination string export" "$AUTO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$AUTO_PLIST"
          /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$AUTO_PLIST"

          export OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_NAME"

          set +e
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist "$AUTO_PLIST" \
            -exportPath "$CM_EXPORT_DIR" | tee "$CM_BUILD_DIR/xcodebuild-export.log"
          XCB_RET=$?
          set -e

          IPA_PATH="$(find "$CM_EXPORT_DIR" -name '*.ipa' -print -quit || true)"

          if [[ "$XCB_RET" -ne 0 || -z "$IPA_PATH" ]]; then
            echo "Automatic export failed → пробуем MANUAL для app bundle"

            MANUAL_PLIST="$CM_BUILD_DIR/exportOptions_manual.plist"
            /usr/libexec/PlistBuddy -c "Clear dict" "$MANUAL_PLIST" 2>/dev/null || true
            /usr/libexec/PlistBuddy -c "Add :method string $EXPORT_METHOD" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :teamID string $DEVELOPMENT_TEAM" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :signingStyle string manual" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :destination string export" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :compileBitcode bool false" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :uploadBitcode bool false" "$MANUAL_PLIST"
            /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" "$MANUAL_PLIST"
            # Маппим ТОЛЬКО главное приложение, по UUID профиля
            /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$BUNDLE_ID string ${PROFILE_UUID}" "$MANUAL_PLIST"

            set +e
            xcodebuild -exportArchive \
              -archivePath "$ARCHIVE_PATH" \
              -exportOptionsPlist "$MANUAL_PLIST" \
              -exportPath "$CM_EXPORT_DIR" | tee -a "$CM_BUILD_DIR/xcodebuild-export.log"
            XCB_RET=$?
            set -e

            IPA_PATH="$(find "$CM_EXPORT_DIR" -name '*.ipa' -print -quit || true)"
            if [[ "$XCB_RET" -ne 0 || -z "$IPA_PATH" ]]; then
              echo "❌ IPA не создана. Хвост лога экспорта:"
              tail -n 200 "$CM_BUILD_DIR/xcodebuild-export.log" || true
              exit 1
            fi
          fi

          echo "✅ IPA created: $IPA_PATH"
          echo "Export dir content:"
          find "$CM_EXPORT_DIR" -maxdepth 2 -type f -print || true

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        submit_to_app_store: true
        cancel_previous_submissions: true
        release_type: MANUAL
