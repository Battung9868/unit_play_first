workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode, manual signing)
    max_build_duration: 60

    environment:
      groups:
        - signing
        - appstore_connect
      vars:
        BUNDLE_ID: io.battung.brightbins
        SCHEME: Unity-iPhone
        DEVELOPMENT_TEAM: R35GJ22D76
        PROFILE_NAME: BrightBins
        EXPORT_METHOD: app-store

    scripts:
      - name: Git LFS (Unity бинарники)
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: Импорт сертификата и профиля
        script: |
          set -euo pipefail

          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed 's/[" ]//g')

          security import "$CERTIFICATE_P12" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$MOBILEPROVISION" > "$TMP_PLIST"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          rm -f "$TMP_PLIST"
          cp "$MOBILEPROVISION" "$PROFILE_DIR/$UUID.mobileprovision"

      - name: Найти .xcodeproj/.xcworkspace и выбрать схему
        script: |
          set -euo pipefail

          WS="$(find . -maxdepth 2 -name '*.xcworkspace' | head -n1 || true)"
          PR="$(find . -maxdepth 2 -name '*.xcodeproj'     | head -n1 || true)"

          if [ -n "$WS" ]; then
            LIST_ARGS=(-workspace "$WS")
            echo "export XCODE_WORKSPACE=\"$WS\"" >> $CM_ENV
          elif [ -n "$PR" ]; then
            LIST_ARGS=(-project "$PR")
            echo "export XCODE_PROJECT=\"$PR\"" >> $CM_ENV
          else
            echo "❌ Не найден .xcworkspace или .xcodeproj"; exit 1
          fi

          if [ -n "${SCHEME:-}" ] && xcodebuild -list "${LIST_ARGS[@]}" | grep -q "$SCHEME"; then
            CHOSEN_SCHEME="$SCHEME"
          else
            CHOSEN_SCHEME="$(xcodebuild -list "${LIST_ARGS[@]}" | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | head -n1 | xargs || true)"
          fi

          if [ -z "$CHOSEN_SCHEME" ]; then
            echo "❌ Не удалось определить схему"; exit 1
          fi

          echo "Using scheme: $CHOSEN_SCHEME"
          echo "export CHOSEN_SCHEME=\"$CHOSEN_SCHEME\"" >> $CM_ENV

      - name: Поднять номер сборки
        script: |
          set -euo pipefail
          INFOPLIST=$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST=$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
          fi

      - name: Archive and export IPA
        script: |
          set -euo pipefail
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"
          : "${CHOSEN_SCHEME:?Missing CHOSEN_SCHEME}"

          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            PROJ_ARG=(-workspace "$XCODE_WORKSPACE")
          else
            PROJ_ARG=(-project "$XCODE_PROJECT")
          fi

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"

          xcodebuild -resolvePackageDependencies "${PROJ_ARG[@]}" -scheme "$CHOSEN_SCHEME"

          xcodebuild archive \
            "${PROJ_ARG[@]}" \
            -scheme "$CHOSEN_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          mkdir -p "$CM_EXPORT_DIR"
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_EXPORT_DIR" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
