workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode, manual signing)
    max_build_duration: 60
    # instance_type: mac_mini_m2

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        DEVELOPMENT_TEAM: R35GJ22D76
        SCHEME: Unity-iPhone
        CHOSEN_SCHEME: Unity-iPhone
        PROFILE_NAME: BrightBins              # –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è (–ù–ï UUID)
        EXPORT_METHOD: app-store              # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è App Store
        # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –≤ –∫–æ—Ä–Ω–µ ‚Äî —É–∫–∞–∂–∏ –ø—É—Ç—å —è–≤–Ω–æ (–æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫ –Ω–∏–∂–µ) –∏ Unity-—ç–∫—Å–ø–æ—Ä—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:
        # XCODE_PROJECT: "Build/iOS/Unity-iPhone.xcodeproj"
        # XCODE_WORKSPACE: "MyApp.xcworkspace"

    scripts:
      - name: Git LFS (Unity –±–∏–Ω–∞—Ä–Ω–∏–∫–∏)
        script: |
          set -eu
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: –ò–º–ø–æ—Ä—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è
        script: |
          set -eu

          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"

          # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –ø—É—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64
          CERT_FILE="cert.p12"
          if [ -n "${CERTIFICATE_P12:-}" ] && [ -f "${CERTIFICATE_P12:-/dev/null}" ]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            printf "%s" "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi
          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          echo "üîê –ü–æ–¥–ø–∏—Å–∏:"
          security find-identity -v -p codesigning "$KEYCHAIN_NAME" || true

          # –ü—Ä–æ—Ñ–∏–ª—å: –ø—É—Ç—å –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64 ‚Üí —Å—Ç–∞–≤–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
          PROF_FILE="profile.mobileprovision"
          if [ -n "${MOBILEPROVISION:-}" ] && [ -f "${MOBILEPROVISION:-/dev/null}" ]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            printf "%s" "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"

          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"

          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          PROFILE_NAME_DETECTED=$(/usr/libexec/PlistBuddy -c "Print Name" "$TMP_PLIST" 2>/dev/null || true)
          APP_IDENTIFIER=$(/usr/libexec/PlistBuddy -c "Print Entitlements:application-identifier" "$TMP_PLIST")

          cp "$PROF_FILE" "$PROFILE_DIR/$PROFILE_UUID.mobileprovision"

          echo "export PROFILE_UUID=\"$PROFILE_UUID\"" >> "$CM_ENV"
          if [ -n "${PROFILE_NAME:-}" ]; then
            echo "export PROFILE_NAME=\"$PROFILE_NAME\"" >> "$CM_ENV"
          else
            echo "export PROFILE_NAME=\"$PROFILE_NAME_DETECTED\"" >> "$CM_ENV"
          fi

          echo "üìÑ PROFILE_UUID: $PROFILE_UUID"
          echo "üìÑ PROFILE_NAME: ${PROFILE_NAME:-$PROFILE_NAME_DETECTED}"
          echo "üìÑ application-identifier: $APP_IDENTIFIER"

          case "$APP_IDENTIFIER" in
            *."$BUNDLE_ID"|"$DEVELOPMENT_TEAM.$BUNDLE_ID") : ;;
            *) echo "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –¥–ª—è $BUNDLE_ID. –ü—Ä–æ–≤–µ—Ä—å —Ç–∏–ø (App Store) –∏ bundle id." ;;
          esac

      - name: –ï—Å–ª–∏ Xcode-–ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∏–∑ Unity (headless)
        script: |
          set -eu

          # –ï—Å–ª–∏ —è–≤–Ω–æ –∑–∞–¥–∞–Ω workspace/project ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
          if [ -n "${XCODE_WORKSPACE:-}" ] || [ -n "${XCODE_PROJECT:-}" ]; then
            echo "‚û°Ô∏è XCODE_WORKSPACE/PROJECT —É–∂–µ –∑–∞–¥–∞–Ω—ã, Unity-—ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            exit 0
          fi

          ROOT="${CM_REPO_DIR:-$PWD}"
          echo "üìÅ Repo root: $ROOT"

          # –£–∂–µ –µ—Å—Ç—å .xcworkspace/.xcodeproj –≤ —Ä–µ–ø–æ?
          XW="$(find "$ROOT" -maxdepth 8 -type d -name "*.xcworkspace" -print -quit 2>/dev/null || true)"
          XP="$(find "$ROOT" -maxdepth 8 -type d -name "*.xcodeproj"   -print -quit 2>/dev/null || true)"
          if [ -n "$XW" ] || [ -n "$XP" ]; then
            echo "‚úÖ Xcode-–ø—Ä–æ–µ–∫—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–ø–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é Unity-—ç–∫—Å–ø–æ—Ä—Ç."
            exit 0
          fi

          echo "üß© Xcode-–ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞—é Unity –≤ headless, —á—Ç–æ–±—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å iOS-–ø—Ä–æ–µ–∫—Ç‚Ä¶"

          # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Editor-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ iOS
          mkdir -p "$ROOT/Assets/Editor"
          cat > "$ROOT/Assets/Editor/CIBuilder.cs" <<'CS'
          using System.Linq;
          using System.IO;
          using UnityEditor;
          using UnityEditor.Build.Reporting;
          using UnityEngine;

          public static class CIBuilder {
              public static void PerformIOSBuild() {
                  var scenes = EditorBuildSettings.scenes
                      .Where(s => s.enabled)
                      .Select(s => s.path)
                      .ToArray();

                  if (scenes.Length == 0) {
                      throw new System.Exception("No enabled scenes in Build Settings.");
                  }

                  var buildPath = Path.Combine("Build", "iOS");
                  Directory.CreateDirectory(buildPath);

                  var report = BuildPipeline.BuildPlayer(scenes, buildPath, BuildTarget.iOS, BuildOptions.None);
                  if (report.summary.result != BuildResult.Succeeded) {
                      throw new System.Exception("iOS build failed: " + report.summary.result);
                  }
                  Debug.Log("‚úÖ Unity exported iOS project to: " + buildPath);
              }
          }
          CS

          # –ò—â–µ–º Unity –±–∏–Ω–∞—Ä–Ω–∏–∫
          UNITY_BIN="$(ls -d /Applications/Unity/Hub/Editor/*/Unity.app/Contents/MacOS/Unity 2>/dev/null | sort -V | tail -n 1 || true)"
          if [ -z "$UNITY_BIN" ]; then
            # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å
            UNITY_BIN="/Applications/Unity/Unity.app/Contents/MacOS/Unity"
          fi
          if [ ! -x "$UNITY_BIN" ]; then
            echo "‚ùå Unity –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏ XCODE_PROJECT –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏ Unity –Ω–∞ –æ–±—Ä–∞–∑–µ."
            exit 1
          fi
          echo "üü¢ –ò—Å–ø–æ–ª—å–∑—É—é Unity: $UNITY_BIN"

          "$UNITY_BIN" -quit -batchmode -nographics \
            -projectPath "$ROOT" \
            -executeMethod CIBuilder.PerformIOSBuild \
            -logFile "$CM_BUILD_DIR/unity-export.log"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Xcode-–ø—Ä–æ–µ–∫—Ç –ø–æ—è–≤–∏–ª—Å—è
          XP2="$(find "$ROOT/Build/iOS" -maxdepth 1 -type d -name "*.xcodeproj" -print -quit 2>/dev/null || true)"
          if [ -z "$XP2" ]; then
            echo "‚ùå Unity –Ω–µ —Å–æ–∑–¥–∞–ª .xcodeproj –≤ Build/iOS. –°–º–æ—Ç—Ä–∏ –ª–æ–≥: $CM_BUILD_DIR/unity-export.log"
            exit 1
          fi

          echo "‚úÖ –ù–∞–π–¥–µ–Ω Xcode-–ø—Ä–æ–µ–∫—Ç: $XP2"
          echo "export XCODE_PROJECT=\"$XP2\"" >> "$CM_ENV"

      - name: –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç/–≤–æ—Ä–∫—Å–ø–µ–π—Å –∏ —Å—Ö–µ–º—É (POSIX-–ø–æ–∏—Å–∫)
        script: |
          set -eu

          CHOSEN="${SCHEME:-Unity-iPhone}"
          echo "‚úÖ Using scheme (forced): $CHOSEN"
          echo "export CHOSEN_SCHEME=\"$CHOSEN\"" >> "$CM_ENV"

          # –ï—Å–ª–∏ –ø—É—Ç—å –∑–∞–¥–∞–Ω –≤—Ä—É—á–Ω—É—é/–ø–æ–ª—É—á–µ–Ω –∏–∑ Unity ‚Äî —É–≤–∞–∂–∞–µ–º –µ–≥–æ
          if [ -n "${XCODE_WORKSPACE:-}" ] && [ -d "$XCODE_WORKSPACE" ]; then
            echo "Using workspace (predefined): $XCODE_WORKSPACE"
            echo "export XCODE_WORKSPACE=\"$XCODE_WORKSPACE\"" >> "$CM_ENV"
            exit 0
          fi
          if [ -n "${XCODE_PROJECT:-}" ] && [ -d "$XCODE_PROJECT" ]; then
            echo "Using project (predefined): $XCODE_PROJECT"
            echo "export XCODE_PROJECT=\"$XCODE_PROJECT\"" >> "$CM_ENV"
            exit 0
          fi

          ROOT="${CM_REPO_DIR:-$PWD}"
          echo "üìÅ Repo root: $ROOT"
          echo "üîé –ü–æ–∏—Å–∫ *.xcworkspace / *.xcodeproj (–¥–æ 8 —É—Ä–æ–≤–Ω–µ–π)‚Ä¶"

          XW="$(find "$ROOT" -maxdepth 8 -type d -name "*.xcworkspace" -print -quit 2>/dev/null || true)"
          XP="$(find "$ROOT" -maxdepth 8 -type d -name "*.xcodeproj"   -print -quit 2>/dev/null || true)"

          if [ -n "$XW" ]; then
            echo "‚úÖ Workspace –Ω–∞–π–¥–µ–Ω: $XW"
            echo "export XCODE_WORKSPACE=\"$XW\"" >> "$CM_ENV"
            exit 0
          fi
          if [ -n "$XP" ]; then
            echo "‚úÖ Project –Ω–∞–π–¥–µ–Ω: $XP"
            echo "export XCODE_PROJECT=\"$XP\"" >> "$CM_ENV"
            exit 0
          fi

          echo "üìÇ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:"
          (command -v tree >/dev/null 2>&1 && tree -L 3) || (ls -la; echo; find . -maxdepth 3 -type d -print)

          echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ .xcworkspace, –Ω–∏ .xcodeproj."
          echo "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–æ–±–∞–≤—å XCODE_PROJECT/XCODE_WORKSPACE –≤ vars –∏–ª–∏ –∑–∞–∫–æ–º–º–∏—Ç—å Xcode-–ø—Ä–æ–µ–∫—Ç."
          exit 1

      - name: –ü–æ–¥–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏ (CFBundleVersion)
        script: |
          set -eu
          INFOPLIST="$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)"
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST="$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)"
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
            echo "üì¶ CFBundleVersion => $CM_BUILD_ID"
          else
            echo "‚ö†Ô∏è Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é"
          fi

      - name: Archive and export IPA (manual signing)
        script: |
          set -eu
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"

          CHOSEN_SCHEME="${CHOSEN_SCHEME:-${SCHEME:-Unity-iPhone}}"
          [ -z "$CHOSEN_SCHEME" ] && { echo "‚ùå –ù–µ—Ç —Å—Ö–µ–º—ã"; exit 1; }
          echo "‚úÖ Archive will use scheme: $CHOSEN_SCHEME"

          if [ -n "${XCODE_WORKSPACE:-}" ] && [ -d "$XCODE_WORKSPACE" ]; then
            PROJ_ARG="-workspace \"$XCODE_WORKSPACE\""
            echo "Using workspace: $XCODE_WORKSPACE"
          elif [ -n "${XCODE_PROJECT:-}" ] && [ -d "$XCODE_PROJECT" ]; then
            PROJ_ARG="-project \"$XCODE_PROJECT\""
            echo "Using project: $XCODE_PROJECT"
          else
            echo "‚ùå –ù–∏ workspace, –Ω–∏ project –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ vars)."
            exit 1
          fi

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"

          # 1) –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
          eval xcodebuild -resolvePackageDependencies $PROJ_ARG -scheme \""$CHOSEN_SCHEME"\"
          eval xcodebuild archive \
            $PROJ_ARG \
            -scheme \""$CHOSEN_SCHEME"\" \
            -configuration Release \
            -archivePath \""$ARCHIVE_PATH"\" \
            DEVELOPMENT_TEAM=\""$DEVELOPMENT_TEAM"\" \
            PRODUCT_BUNDLE_IDENTIFIER=\""$BUNDLE_ID"\" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # 2) –≠–∫—Å–ø–æ—Ä—Ç —Å —Ä—É—á–Ω—ã–º –ø–æ–¥–ø–∏—Å–∞–Ω–∏–µ–º
          mkdir -p "$CM_EXPORT_DIR"
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>${EXPORT_METHOD}</string>
            <key>teamID</key>
            <string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

          echo "üßæ exportOptions.plist:"; cat exportOptions.plist

          eval xcodebuild -exportArchive \
            -archivePath \""$ARCHIVE_PATH"\" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath \""$CM_EXPORT_DIR"\" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"

    artifacts:
      - $CM_BUILD_DIR/unity-export.log
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # skip_waiting_for_build_processing: true
