workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode, manual signing)
    max_build_duration: 60
    # instance_type: mac_mini_m2   # –º–æ–∂–Ω–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–∑

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        BUNDLE_ID: io.battung.brightbins
        SCHEME: Unity-iPhone
        CHOSEN_SCHEME: Unity-iPhone
        DEVELOPMENT_TEAM: R35GJ22D76
        PROFILE_NAME: BrightBins
        EXPORT_METHOD: app-store

    scripts:
      - name: Git LFS (Unity –±–∏–Ω–∞—Ä–Ω–∏–∫–∏)
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: –ò–º–ø–æ—Ä—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è
        script: |
          set -euo pipefail
          KEYCHAIN_NAME=codemagic.keychain
          KEYCHAIN_PASS="$(uuidgen)"
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security set-keychain-settings "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed 's/[" ]//g')

          # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Ñ–∞–π–ª –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64)
          CERT_FILE="cert.p12"
          if [ -n "${CERTIFICATE_P12:-}" ] && [ -f "${CERTIFICATE_P12:-/dev/null}" ]; then
            CERT_FILE="$CERTIFICATE_P12"
          else
            echo "$CERTIFICATE_P12" | base64 --decode > "$CERT_FILE"
          fi

          # –ü—Ä–æ—Ñ–∏–ª—å (—Ñ–∞–π–ª –≤ —Å–µ–∫—Ä–µ—Ç–µ –∏–ª–∏ base64)
          PROF_FILE="profile.mobileprovision"
          if [ -n "${MOBILEPROVISION:-}" ] && [ -f "${MOBILEPROVISION:-/dev/null}" ]; then
            PROF_FILE="$MOBILEPROVISION"
          else
            echo "$MOBILEPROVISION" | base64 --decode > "$PROF_FILE"
          fi

          security import "$CERT_FILE" -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASS" "$KEYCHAIN_NAME"

          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          TMP_PLIST="$(mktemp -t prov.plist)"
          security cms -D -i "$PROF_FILE" > "$TMP_PLIST"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" "$TMP_PLIST")
          rm -f "$TMP_PLIST"
          cp "$PROF_FILE" "$PROFILE_DIR/$UUID.mobileprovision"

      - name: –í—ã–±—Ä–∞—Ç—å —Å—Ö–µ–º—É –∏ –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç (–º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –±–µ–∑ list)
        script: |
          set -euo pipefail
          # 1) –°—Ö–µ–º–∞ (–∂—ë—Å—Ç–∫–æ)
          CHOSEN="${SCHEME:-Unity-iPhone}"
          echo "‚úÖ Using scheme (forced): $CHOSEN"
          echo "export CHOSEN_SCHEME=\"$CHOSEN\"" >> "$CM_ENV"

          # 2) –ü–æ–∏—Å–∫ workspace / project –ø–æ —à–∞–±–ª–æ–Ω–∞–º, –±–µ–∑ –∑–∞–≤–∏—Å–∞–Ω–∏–π
          # –°–Ω–∞—á–∞–ª–∞ workspace
          WS="$(find . -type d -name '*.xcworkspace' -print -quit 2>/dev/null || true)"

          # –ï—Å–ª–∏ –Ω–µ—Ç workspace ‚Äî –∏—â–µ–º —Ç–∏–ø–æ–≤–æ–π Unity –ø—Ä–æ–µ–∫—Ç
          PR="$(find . -type d -name 'Unity-iPhone.xcodeproj' -print -quit 2>/dev/null || true)"
          # –ï—Å–ª–∏ –∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –ª—é–±–æ–π .xcodeproj
          [ -z "$PR" ] && PR="$(find . -type d -name '*.xcodeproj' -print -quit 2>/dev/null || true)"

          if [ -n "$WS" ]; then
            echo "Using workspace: $WS"
            echo "export XCODE_WORKSPACE=\"$WS\"" >> "$CM_ENV"
          elif [ -n "$PR" ]; then
            echo "Using project: $PR"
            echo "export XCODE_PROJECT=\"$PR\"" >> "$CM_ENV"
          else
            echo "üìÇ –ù–µ –Ω–∞–π–¥–µ–Ω–æ .xcworkspace/.xcodeproj, —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:"
            find . -maxdepth 4 -type d -name '*.xcodeproj' -or -name '*.xcworkspace' || true
            echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω .xcworkspace –∏–ª–∏ .xcodeproj"; exit 1
          fi

      - name: –ü–æ–¥–Ω—è—Ç—å –Ω–æ–º–µ—Ä —Å–±–æ—Ä–∫–∏
        script: |
          set -euo pipefail
          INFOPLIST=$(grep -rl --include="Info.plist" "<string>${BUNDLE_ID}</string>" . || true)
          if [ -z "$INFOPLIST" ]; then
            INFOPLIST=$(grep -rl --include="Info.plist" "<key>CFBundleIdentifier</key>" . | head -n1 || true)
          fi
          if [ -n "$INFOPLIST" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $CM_BUILD_ID" "$INFOPLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $CM_BUILD_ID" "$INFOPLIST"
          else
            echo "‚ö†Ô∏è Info.plist –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é"
          fi

      - name: Archive and export IPA
        script: |
          set -euo pipefail
          : "${DEVELOPMENT_TEAM:?Missing DEVELOPMENT_TEAM}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${EXPORT_METHOD:?Missing EXPORT_METHOD}"

          CHOSEN_SCHEME="${CHOSEN_SCHEME:-${SCHEME:-Unity-iPhone}}"
          [ -z "$CHOSEN_SCHEME" ] && { echo "‚ùå –ù–µ—Ç —Å—Ö–µ–º—ã"; exit 1; }
          echo "‚úÖ Archive will use scheme: $CHOSEN_SCHEME"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ü–û–í–¢–û–†–ù–û –∏—â–µ–º –ø—Ä–æ–µ–∫—Ç/–≤–æ—Ä–∫—Å–ø–µ–π—Å
          if [ -n "${XCODE_WORKSPACE:-}" ] && [ -d "$XCODE_WORKSPACE" ]; then
            echo "Using workspace: $XCODE_WORKSPACE"
            PROJ_ARG=(-workspace "$XCODE_WORKSPACE")
          elif [ -n "${XCODE_PROJECT:-}" ] && [ -d "$XCODE_PROJECT" ]; then
            echo "Using project: $XCODE_PROJECT"
            PROJ_ARG=(-project "$XCODE_PROJECT")
          else
            echo "‚ö†Ô∏è workspace/project –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã ‚Äî –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫‚Ä¶"
            WS="$(find . -type d -name '*.xcworkspace' -print -quit 2>/dev/null || true)"
            PR="$(find . -type d -name 'Unity-iPhone.xcodeproj' -print -quit 2>/dev/null || true)"
            [ -z "$PR" ] && PR="$(find . -type d -name '*.xcodeproj' -print -quit 2>/dev/null || true)"
            if [ -n "$WS" ]; then
              echo "Using workspace (re-detected): $WS"
              PROJ_ARG=(-workspace "$WS")
            elif [ -n "$PR" ]; then
              echo "Using project (re-detected): $PR"
              PROJ_ARG=(-project "$PR")
            else
              echo "üìÇ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Ä—è–¥–æ–º:"
              find . -maxdepth 4 -type d -name '*.xcodeproj' -or -name '*.xcworkspace' || true
              echo "‚ùå –ù–∏ workspace, –Ω–∏ project –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"; exit 1
            fi
          fi

          ARCHIVE_PATH="$CM_BUILD_DIR/app.xcarchive"

          # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ë–ï–ó –ø–æ–¥–ø–∏—Å–∏ (UnityFramework –Ω–µ –ª–æ–º–∞–µ–º)
          xcodebuild -resolvePackageDependencies "${PROJ_ARG[@]}" -scheme "$CHOSEN_SCHEME"

          xcodebuild archive \
            "${PROJ_ARG[@]}" \
            -scheme "$CHOSEN_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
          | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          mkdir -p "$CM_EXPORT_DIR"
          cat > exportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>__EXPORT_METHOD__</string>
            <key>teamID</key>
            <string>__DEVELOPMENT_TEAM__</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>__BUNDLE_ID__</key>
              <string>__PROFILE_NAME__</string>
            </dict>
            <key>destination</key>
            <string>export</string>
            <key>compileBitcode</key>
            <false/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
          sed -i.bak "s|__EXPORT_METHOD__|$EXPORT_METHOD|g; s|__DEVELOPMENT_TEAM__|$DEVELOPMENT_TEAM|g; s|__BUNDLE_ID__|$BUNDLE_ID|g; s|__PROFILE_NAME__|$PROFILE_NAME|g" exportOptions.plist

          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_EXPORT_DIR" \
          | tee "$CM_BUILD_DIR/xcodebuild-export.log"

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_BUILD_DIR/xcodebuild-export.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # skip_waiting_for_build_processing: true
