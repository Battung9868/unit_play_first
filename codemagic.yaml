      - name: Найти .xcodeproj/.xcworkspace и выбрать схему (надёжно)
        script: |
          set -euo pipefail

          echo "== Поиск .xcworkspace/.xcodeproj =="
          WS="$(find . -maxdepth 3 -name '*.xcworkspace' | head -n1 || true)"
          PR="$(find . -maxdepth 3 -name '*.xcodeproj'     | head -n1 || true)"

          if [ -n "$WS" ]; then
            echo "Using workspace: $WS"
            LIST_ARGS=(-workspace "$WS")
            echo "export XCODE_WORKSPACE=\"$WS\"" >> "$CM_ENV"
          elif [ -n "$PR" ]; then
            echo "Using project: $PR"
            LIST_ARGS=(-project "$PR")
            echo "export XCODE_PROJECT=\"$PR\"" >> "$CM_ENV"
          else
            echo "❌ Не найден .xcworkspace или .xcodeproj"; exit 1
          fi

          echo "== Список схем (JSON) =="
          # Не все Xcode умеют -json на -workspace, поэтому пробуем по очереди
          set +e
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            JSON_LIST="$(xcodebuild -list -json -workspace "$XCODE_WORKSPACE" 2>/dev/null)"
          fi
          if [ -z "${JSON_LIST:-}" ] && [ -n "${XCODE_PROJECT:-}" ]; then
            JSON_LIST="$(xcodebuild -list -json -project "$XCODE_PROJECT" 2>/dev/null)"
          fi
          set -e

          if [ -n "${JSON_LIST:-}" ]; then
            echo "$JSON_LIST" | head -c 2000 || true
            # Попытаемся достать первую схему через plutil (macOS утилита)
            set +e
            FIRST_SCHEME="$(echo "$JSON_LIST" | plutil -extract schemes.0 raw -o - - 2>/dev/null)"
            set -e
          else
            echo "⚠️ -json недоступен; используем текстовый парсер."
            FIRST_SCHEME="$(xcodebuild -list "${LIST_ARGS[@]}" | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | head -n1 | xargs || true)"
          fi

          # Если пользователь заранее указал SCHEME и она есть — используем её
          CHOSEN_SCHEME=""
          if [ -n "${SCHEME:-}" ]; then
            echo "Пробуем схему из SCHEME: $SCHEME"
            if xcodebuild -list "${LIST_ARGS[@]}" | grep -q -F "$SCHEME"; then
              CHOSEN_SCHEME="$SCHEME"
            fi
          fi

          # Иначе берём первую найденную
          if [ -z "$CHOSEN_SCHEME" ] && [ -n "${FIRST_SCHEME:-}" ]; then
            CHOSEN_SCHEME="$FIRST_SCHEME"
          fi

          # Если всё ещё пусто — пробуем дефолт Unity
          if [ -z "$CHOSEN_SCHEME" ]; then
            echo "⚠️ Схема не найдена автоматически, пробую 'Unity-iPhone'…"
            if xcodebuild -list "${LIST_ARGS[@]}" | grep -q -F "Unity-iPhone"; then
              CHOSEN_SCHEME="Unity-iPhone"
            fi
          fi

          if [ -z "$CHOSEN_SCHEME" ]; then
            echo "❌ Не удалось определить схему."
            echo "Проверь следующее:"
            echo "  1) Схема должна быть Shared (в Xcode: Product → Scheme → Manage Schemes… → галочка Shared)."
            echo "  2) В репозитории должен быть закоммичен файл схемы:"
            if [ -n "${XCODE_PROJECT:-}" ]; then
              echo "     ${XCODE_PROJECT}/xcshareddata/xcschemes/<СХЕМА>.xcscheme"
            else
              echo "     <Your>.xcodeproj/xcshareddata/xcschemes/<СХЕМА>.xcscheme"
            fi
            echo "  3) Если используешь workspace, то схема должна быть в workspace и тоже Shared."
            exit 1
          fi

          echo "✅ Using scheme: $CHOSEN_SCHEME"
          echo "export CHOSEN_SCHEME=\"$CHOSEN_SCHEME\"" >> "$CM_ENV"
