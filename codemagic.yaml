      - name: "Locate Xcode project/workspace & install CocoaPods if needed"
        script: |
          set -euo pipefail

          # 1) Находим .xcworkspace (директория), иначе .xcodeproj (директория)
          TARGET_WS="$(find . -type d -name "*.xcworkspace" -prune -print -quit || true)"
          TARGET_PR="$(find . -type d -name "*.xcodeproj"   -prune -print -quit || true)"

          if [ -n "$TARGET_WS" ]; then
            TARGET_DIR="$(dirname "$TARGET_WS")"
            cd "$TARGET_DIR"
            XCODE_WORKSPACE="$(basename "$TARGET_WS")"
            echo "Using workspace: $XCODE_WORKSPACE (dir: $TARGET_DIR)"
            echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> "$CM_ENV"
          elif [ -n "$TARGET_PR" ]; then
            TARGET_DIR="$(dirname "$TARGET_PR")"
            cd "$TARGET_DIR"
            XCODE_PROJECT="$(basename "$TARGET_PR")"
            echo "Using project: $XCODE_PROJECT (dir: $TARGET_DIR)"
            echo "XCODE_PROJECT=$XCODE_PROJECT" >> "$CM_ENV"
          else
            echo "❌ No .xcworkspace or .xcodeproj found. Repo tree:" >&2
            find . -maxdepth 3 -print | sed -n '1,300p'
            exit 66
          fi

          # 2) CocoaPods при наличии Podfile
          if [ -f "Podfile" ]; then
            gem install cocoapods --no-document
            pod repo update
            pod install
            if ls ./*.xcworkspace >/dev/null 2>&1; then
              XCODE_WORKSPACE="$(ls -1 *.xcworkspace | head -n1)"
              echo "Detected workspace after Pods: $XCODE_WORKSPACE"
              echo "XCODE_WORKSPACE=$XCODE_WORKSPACE" >> "$CM_ENV"
            fi
          fi

          # 3) Получаем список схем (текстовый вывод, без temp-файлов)
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            LIST_TXT="$( (xcodebuild -workspace "$XCODE_WORKSPACE" -list 2>/dev/null) || true )"
          else
            LIST_TXT="$( (xcodebuild -project "$XCODE_PROJECT" -list 2>/dev/null) || true )"
          fi

          # Вытащим схемы построчно
          SCHEMES="$(printf '%s\n' "$LIST_TXT" | awk '/Schemes:/{flag=1;next} flag && NF {print}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
          if [ -z "$SCHEMES" ]; then
            echo "❌ No shared schemes found. Enable 'Shared' in Xcode." >&2
            printf 'xcodebuild -list output:\n%s\n' "$LIST_TXT" >&2
            exit 66
          fi

          # 4) Выбираем схему: Unity-iPhone > любая с WRAPPER_EXTENSION=app > первая
          XCODE_SCHEME=""
          FIRST_SCHEME=""

          # 4a) первая строка — запомним
          FIRST_SCHEME="$(printf '%s\n' "$SCHEMES" | head -n1)"

          # 4b) если есть Unity-iPhone — берём её
          if printf '%s\n' "$SCHEMES" | grep -qx "Unity-iPhone"; then
            XCODE_SCHEME="Unity-iPhone"
          else
            # 4c) ищем любую app-схему
            while IFS= read -r s; do
              [ -z "$s" ] && continue
              if [ -n "${XCODE_WORKSPACE:-}" ]; then
                if xcodebuild -workspace "$XCODE_WORKSPACE" -scheme "$s" -showBuildSettings 2>/dev/null | grep -q "WRAPPER_EXTENSION = app"; then
                  XCODE_SCHEME="$s"; break
                fi
              else
                if xcodebuild -project "$XCODE_PROJECT" -scheme "$s" -showBuildSettings 2>/dev/null | grep -q "WRAPPER_EXTENSION = app"; then
                  XCODE_SCHEME="$s"; break
                fi
              fi
            done <<EOF
$(printf '%s\n' "$SCHEMES")
EOF
          fi

          # 4d) если ничего не нашли — берём первую
          if [ -z "$XCODE_SCHEME" ]; then
            XCODE_SCHEME="$FIRST_SCHEME"
          fi

          echo "Detected scheme: $XCODE_SCHEME"
          echo "XCODE_SCHEME=$XCODE_SCHEME" >> "$CM_ENV"
