workflows:
  ios_appstore_manual_signing:
    name: iOS App Store (Unity Xcode export) — manual signing
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_* 
      vars:
        BUNDLE_ID: "io.battung.brightbins"
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Git LFS (Unity-бинарники)
        script: |
          set -euo pipefail
          git lfs install
          git lfs fetch
          git lfs checkout

      - name: Импорт сертификата и профиля (+ экспорт переменных)
        script: |
          set -euo pipefail
          set -x
          # --- keychain ---
          KEYCHAIN="$HOME/Library/Keychains/codemagic.keychain-db"
          security create-keychain -p "" "$KEYCHAIN" || true
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN" login.keychain

          # --- cert ---
          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          security import cert.p12 -k "$KEYCHAIN" -P "${CERTIFICATE_PASSWORD:-}" -T /usr/bin/codesign -T /usr/bin/xcodebuild

          # --- provisioning profile ---
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/profile.mobileprovision"
          echo "$MOBILEPROVISION" | base64 --decode > "$PROFILE_PATH"

          # Разобрать mobileprovision -> plist
          PP_PLIST=$(mktemp)
          security cms -D -i "$PROFILE_PATH" > "$PP_PLIST"

          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$PP_PLIST")
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PP_PLIST" || echo "")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PP_PLIST")
          # На случай, если Name пустой — используем UUID
          PROFILE_NAME=${PROFILE_NAME:-$PROFILE_UUID}

          echo "DEVELOPMENT_TEAM=$TEAM_ID"           | tee -a "$CM_ENV"
          echo "PROFILE_NAME=$PROFILE_NAME"          | tee -a "$CM_ENV"
          echo "CODE_SIGN_IDENTITY=${CODE_SIGN_IDENTITY:-Apple Distribution}" | tee -a "$CM_ENV"
          echo "PROFILE_PATH=$PROFILE_PATH"          | tee -a "$CM_ENV"

      - name: Найти Xcode-проект и схему (предпочтать Unity-iPhone)
        script: |
          set -euo pipefail
          set -x
          WS="$(find . -maxdepth 2 -name "*.xcworkspace" | head -n1 || true)"
          PR="$(find . -maxdepth 2 -name "*.xcodeproj"   | head -n1 || true)"
          if [ -n "$WS" ]; then
            PROJ_ARG="-workspace \"$WS\""
          elif [ -n "$PR" ]; then
            PROJ_ARG="-project \"$PR\""
          else
            echo "❌ .xcworkspace/.xcodeproj не найден"; exit 1
          fi

          SCHEMES="$(eval xcodebuild -list $PROJ_ARG | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | xargs -L1 echo || true)"
          if echo "$SCHEMES" | grep -qx "Unity-iPhone"; then
            SCHEME="Unity-iPhone"
          else
            SCHEME="$(echo "$SCHEMES" | grep -v "^GameAssembly$" | head -n1 || echo Unity-iPhone)"
          fi

          echo "PROJ_ARG=$PROJ_ARG" | tee -a "$CM_ENV"
          echo "SCHEME=$SCHEME"     | tee -a "$CM_ENV"

      - name: Проверка наличия IL2CPP toolchain в репо
        script: |
          set -euo pipefail
          ROOT="$(pwd)"
          DEPLOY_DIR_1="$ROOT/Il2CppOutputProject/IL2CPP/build/deploy_arm64"
          DEPLOY_DIR_2="$ROOT/Il2CppOutputProject/IL2CPP/build/deploy"
          BEE_1="$DEPLOY_DIR_1/bee_backend/mac-arm64/bee_backend"
          BEE_2="$DEPLOY_DIR_2/bee_backend/mac-arm64/bee_backend"
          IL2CPP_1="$DEPLOY_DIR_1/il2cpp"
          IL2CPP_2="$DEPLOY_DIR_2/il2cpp"

          find Il2CppOutputProject -maxdepth 3 -type d -name "deploy*" -print || true

          if [ -x "$IL2CPP_1" ] && [ -x "$BEE_1" ]; then
            echo "OK: найдено $DEPLOY_DIR_1"
          elif [ -x "$IL2CPP_2" ] && [ -x "$BEE_2" ]; then
            echo "OK: найдено $DEPLOY_DIR_2"
          else
            echo "❌ Il2CPP/bee не в репозитории. Добавь Il2CppOutputProject/IL2CPP/build/** под LFS."; exit 65
          fi

      - name: Подготовка версий (Info.plist)
        script: |
          set -euo pipefail
          set -x
          PLIST="$(find . -maxdepth 2 -name Info.plist | head -n1 || true)"
          if [ -z "$PLIST" ]; then echo "Пропускаю: Info.plist не найден"; exit 0; fi
          # Если переменные не заданы — ничего не меняем
          if [ -n "${APP_VERSION:-}" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $APP_VERSION" "$PLIST" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $APP_VERSION" "$PLIST"
          fi
          if [ -n "${APP_BUILD:-}" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $APP_BUILD" "$PLIST" || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $APP_BUILD" "$PLIST"
          fi
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST" || true

      - name: Archive and export IPA
        script: |
          set -euo pipefail
          set -x

          # Fallbackы (если шаг выше по какой-то причине не записал переменные)
          if [ -z "${PROJ_ARG:-}" ]; then
            WS="$(find . -maxdepth 2 -name "*.xcworkspace" | head -n1 || true)"
            PR="$(find . -maxdepth 2 -name "*.xcodeproj"   | head -n1 || true)"
            [ -n "$WS" ] && PROJ_ARG="-workspace \"$WS\"" || PROJ_ARG="-project \"$PR\""
          fi

          if [ -z "${SCHEME:-}" ]; then
            DETECTED="$(eval xcodebuild -list $PROJ_ARG | sed -n '/Schemes:/,/^$/p' | sed '1d;$d' | xargs -L1 echo | { grep -x "Unity-iPhone" || true; } )"
            SCHEME="${DETECTED:-Unity-iPhone}"
          fi

          # Подхватить team/profile из профиля, если их нет
          if [ -z "${DEVELOPMENT_TEAM:-}" ] || [ -z "${PROFILE_NAME:-}" ]; then
            if [ -n "${PROFILE_PATH:-}" ]; then
              PP_PLIST=$(mktemp); security cms -D -i "$PROFILE_PATH" > "$PP_PLIST"
              DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM:-$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' "$PP_PLIST")}"
              PROFILE_NAME="${PROFILE_NAME:-$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PP_PLIST" || /usr/libexec/PlistBuddy -c 'Print :UUID' "$PP_PLIST")}"
            fi
          fi

          CODE_SIGN_IDENTITY=${CODE_SIGN_IDENTITY// /\\ } \:-Apple Distribution}"

          ARCHIVE_PATH="$CM_BUILD_DIR/$SCHEME.xcarchive"

          # На всякий — SPM
          eval xcodebuild -resolvePackageDependencies $PROJ_ARG -scheme "$SCHEME" || true

          # Архив
          eval xcodebuild archive $PROJ_ARG \
            -scheme "$SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${DEVELOPMENT_TEAM:-}" \
            PROVISIONING_PROFILE_SPECIFIER="${PROFILE_NAME:-}" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            | tee "$CM_BUILD_DIR/xcodebuild-archive.log"

          # exportOptions.plist
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${DEVELOPMENT_TEAM}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>destination</key><string>export</string>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>manageAppVersionAndBuildNumber</key><false/>
          </dict></plist>
          EOF

          # Экспорт IPA
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_EXPORT_DIR"

          ls -lah "$CM_EXPORT_DIR"

    artifacts:
      - $CM_BUILD_DIR/xcodebuild-archive.log
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_BUILD_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
